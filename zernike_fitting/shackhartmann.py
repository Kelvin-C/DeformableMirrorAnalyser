# |**********************************************************************;
# * Project           : MSci Project: PLAS-Smith-3
# *
# * Program name      : shackhartmann.py
# *
# * Author            : Kelvin Chan
# *
# * Date created      : 03 MAR 2018
# *
# * Purpose           : Reads the wavefront data from the csv file generated by the Shack Hartmann.
# *
# * Revision History  : v1.0
# *
# |**********************************************************************;

import csv
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import pickle

# Shack Hartmann csv file
csv_file = "focus.csv"

# Name of the text file that will be used to store the csv data for MATLAB to analyse.
output_filename = "focus.txt"

def read_csv_shackhartmann(csv_file, row_start = 101, delnan=True, circle=False, Z1=0):
    """
    Reads the wavefront values measured by the Shack Hartmann.

    PARAMs:
    row_start: The row number which shows the x-coordinates.
    delnan: Exclude the rows and columns with nan in the csv file.
    circle: Include only the wavefront within a circle with the radius of the maximum X or Y coordinate.
    Z1: The Z array of another wavefront that is used to compare with this one.
        If there aren't another Z array, set Z1 = 0.
    """

    #Read the data
    csv_table = []
    with open(csv_file, 'r') as file:
        report = csv.reader(file)

        #GO TO USEFUL DATA
        for i in range(row_start-1):
            next(report)

        for row in report:
            csv_table.append(row)

    #Sort XYZ data into arrays.
    x = csv_table[0][1:]
    y = np.transpose(csv_table)[0][1:]
    Y, X = np.meshgrid(y, x)
    Z = np.array(csv_table)[1:, 1:]

    #Clean XYZ
    while '' in X:
        loc = np.where(X == '')[0][0]
        X = np.delete(X, loc, 0)
        Y = np.delete(Y, loc, 0)
        Z = np.delete(Z, loc, 1)

    X, Y, Z = X.astype(float), Y.astype(float), Z.astype(float)

    #Correct the order of Y
    Y = Y[:, ::-1]

    #Use delnan and/or Z1 to
    if delnan == True or type(Z1) != int:
        while True in np.isnan(Z):
            loc = np.where(np.isnan(Z) == True)
            short_loc = list(map(lambda array: list(set(array)), loc))
            short_loc_len = np.array(list(map(len, short_loc)))
            del_axis = np.where(short_loc_len == min(short_loc_len))[0][0]

            if type(Z1) != int:
                [i, j] = np.transpose(loc)[0]
                Z1[i, j] = 0.
                Z[i, j] = 0.

            if delnan == True:
                for axis in range(2):
                    X = np.delete(X, short_loc[del_axis][0], axis)
                    Y = np.delete(Y, short_loc[del_axis][0], axis)
                    Z = np.delete(Z, short_loc[del_axis][0], axis)


    if circle == True:
        max_X = max(list(map(max, X)))
        xlen, ylen = X.shape
        for i in range(xlen):
            for j in range(ylen):
                if X[i, j]**2 + Y[i, j]**2 > max_X**2:
                    Z[i, j] = float('nan')



    ## Sets all NANs to 0 in Z
    # if True in np.isnan(Z):
    #     loc = np.where(np.isnan(Z) == True)
    #     loc = np.transpose(loc)
    #     for index in loc:
    #         [i, j] = index
    #         Z[i, j] = 0

    if type(Z1) != int:
        return X, Y, Z, Z1

    return X, Y, Z

def readtxt(filename):
    """
    Reads all numbers in a text file.
    It is assumed that the text file only stores numbers.
    """
    file = open(filename, 'r')
    N = file.readlines()
    N = list(map(float, N))
    return N

def writetxt(txt_file, X, Y, Z):
    """
    Writes and stores the values of X, Y and Z to be analysed in MATLAB.
    """
    X = X.astype(str)
    Y = Y.astype(str)
    Z = Z.astype(str)
    xyz = [X, Y, Z]
    print("Matrix Dimensions: %i x %i" % Z.shape)
    with open(txt_file, 'w') as file:
        for j in range(3):
            for i in range(len(Z)):
                row = ' '.join(xyz[j][i]) + '\n'
                file.write(row)
    return


def plot3d(X, Y, Z):
    """
    Plots the data in 3D with the XYZ data.
    """
    fig = plt.figure(figsize=(12, 8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.RdYlGn,
        linewidth=0, antialiased=False, alpha = 0.6)
    # surf = ax.plot_surface(X, Y, diff, rstride=1, cstride=1, cmap=cm.RdYlGn,
    #                        linewidth=0, antialiased=False, alpha=0.6)

    fontsize = 22
    linespace = 2
    ax.zaxis.set_rotate_label(False)
    ax.set_xlabel('\n$X$ $(mm)$', fontsize=fontsize, linespacing=linespace)
    ax.set_ylabel('\n$Y$ $(mm)$', fontsize=fontsize, linespacing=linespace)
    ax.set_zlabel('\n$Z$ $(\mu m)$', fontsize=fontsize, rotation=-5, linespacing=2)
    ax.tick_params(labelsize=22)
    fig.colorbar(surf, shrink=1, aspect=30)

X, Y, Z = read_csv_shackhartmann(csv_file, row_start=101, delnan=True, circle=False, Z1=0)

writetxt(output_filename, X, Y, Z)
print("Data Filename: %s" %output_filename)

plot3d(X, Y, Z)
plt.show()

