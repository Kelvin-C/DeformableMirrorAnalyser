# |**********************************************************************;
# * Project           : MSci Project: PLAS-Smith-3
# *
# * Program name      : read_xyz.py
# *
# * Author            : Kelvin Chan
# *
# * Date created      : 10 MAR 2018
# *
# * Purpose           : Read the .xyz data generated by the Zygo interferometer.
# *
# * Revision History  : v1.0
# *
# |**********************************************************************;

import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import pickle
import numpy as np


####################### INPUT #########################
# Name of .xyz file generated by Zygo
data_file = 'Zerodur.xyz'

# Name of the text file that will be used to store the XYZ data for MATLAB to analyse.
output_filename = 'Zerodur.txt'

# The value used to mask the unavailable data in the .xyz file. The value itself does not matter, but best to
# to make it very large (~100). This value allows MATLAB to ignore the unavailable data.
no_data_val = 100

# The data can be incremented such that the number of data values are reduced. The number of data values are
# reduced by a factor of this value.
data_increments = 3

# The data can be restricted to within a circle of this radius. Change to False if no restrictions are wanted.
reduce_radius = 1

# Plot the resulting data?
data_plot = True

##########################################################

def writetxt(txt_file, X, Y, Z):
    """
    Writes and stores the values of X, Y and Z to be analysed in MATLAB.
    """
    X = X.astype(str)
    Y = Y.astype(str)
    Z = Z.astype(str)
    xyz = [X, Y, Z]
    with open(txt_file, 'w') as file:
        for j in range(3):
            for i in range(len(Z)):
                row = ' '.join(xyz[j][i]) + '\n'
                file.write(row)
    return

def normaliseaxis(array):
    """
    Sets the coordinate axes to be centred at origin with a range from -1 to 1

    array: X or Y (NxN array)
    """
    max_val = max(list(map(max, array)))
    min_val = min(list(map(min, array)))
    centre_val = (max_val - min_val)/2. + min_val
    array = array - centre_val
    array = array/((max_val - min_val)/2.)
    return array

def reducesize(r, X, Y, Z, new_val=0):
    """
    Restricts the wavefront to within a circle of radius 'r' and converts the Z values
    outside of the circle to be new_val
    """
    zlen = len(Z)
    for i in range(zlen):
        for j in range(zlen):
            new_r = np.sqrt(X[i,j]**2 + Y[i,j]**2)
            if new_r > r:
                Z[i,j] = new_val
    return X, Y, Z

def readzygodata(data_file, no_data_val=0):
    """
    Read the .xyz data from Zygo.

    data_file: Name of the data_file (STRING, include .xyz)
    no_data_val: New value for the unavailable data within the .xyz file.
    """

    no_data_val = str(no_data_val)
    data = open(data_file, 'r')

    # Ignore the first 14 lines as they are only information about the Zygo system.
    for i in range(14):
        data.readline()

    stop = False
    x = []
    y = []
    z = []

    # Read and store all the XYZ data that are available.
    # For the unavailable data, they are masked with 'no_data_val' value set by the parameters of this function.
    while stop == False:
        line = data.readline()
        xyz = line.split()
        if len(xyz) == 4:
            x.append(xyz[0])
            y.append(xyz[1])
            z.append(no_data_val)
        if len(xyz) == 3:
            x.append(xyz[0])
            y.append(xyz[1])
            z.append(xyz[2])
        elif len(xyz) == 0:
            stop = True

    data.close()

    x = list(map(float, x))
    y = list(map(float, y))
    z = list(map(float, z))

    new_x = []
    new_y = []
    new_z = []

    # Corrects the positioning of the XYZ data.
    j = 0
    x0 = 0
    for i in range(len(x)):
        if x[i] < x0:
            new_x.append(x[j:i])
            new_y.append(y[j:i])
            new_z.append(z[j:i])
            j = i
        x0 = x[i]

    X, Y, Z = np.array(new_x), np.array(new_y), np.array(new_z)

    return X, Y, Z

def plotdata(X, Y, Z):
    """
    Generates a 3D plot of the data.
    """
    fig = plt.figure(figsize=(12, 8))
    ax = fig.add_subplot(111, projection='3d')
    surf = ax.plot_surface(Y, X, Z, rstride=1, cstride=1, cmap=cm.RdYlGn,
                           linewidth=0, antialiased=False, alpha=0.6)

    fontsize = 22
    linespace = 2
    ax.zaxis.set_rotate_label(False)
    ax.set_xlabel('\n$X$ $(mm)$', fontsize=fontsize, linespacing=linespace)
    ax.set_ylabel('\n$Y$ $(mm)$', fontsize=fontsize, linespacing=linespace)
    ax.set_zlabel('\n$Z$ $(\mu m)$', fontsize=fontsize, rotation=-5, linespacing=-4)
    ax.tick_params(labelsize=22)
    fig.colorbar(surf, shrink=1, aspect=30)

    plt.show()

X, Y, Z = readzygodata(data_file, no_data_val=no_data_val)

n = data_increments

# Convert Z into a square matrix by ignoring the last few data points.
zx, zy = Z.shape
if zx < zy:
    m = zx-zy
    p = None
elif zx > zy:
    m = None
    p = zy-zx
else:
    m = None
    p = None
X, Y, Z = X[:p, :m], Y[:p, :m], Z[:p, :m]

# Reduce data size by reading in increments
X, Y, Z = X[::n, ::n], Y[::n, ::n], Z[::n, ::n]

X = normaliseaxis(X)
Y = normaliseaxis(Y)
X, Y, Z = X.T, Y.T, Z.T

if reduce_radius != False:
    X, Y, Z = reducesize(reduce_radius, X, Y, Z, no_data_val)

print("Matrix Dimensions: %i x %i" %Z.shape)

writetxt(output_filename, X, Y, Z)
print("Data Filename: %s" %output_filename)

if data_plot:
    Z[Z == no_data_val] = np.nan
    plotdata(X, Y, Z)